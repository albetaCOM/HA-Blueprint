blueprint:
  author: AlbetaCOM
  name: SenseCap Indicator Component
  description: 'Blueprint to be used with SenseCap Indicator AlbetaCOM project to update the switches state.'
  domain: automation
  input:
    ha_switch_entities:
      name: ha switch entities
      description: entity to control from SenseCap indicator
      selector:
        entity:
          filter:
          - domain:
            - cover
            - light
            - switch
            - fan
            - alarm_control_panel
          multiple: true
    ha_sensor_entities:
      name: ha sensor entities
      description: entity to sense from SenseCap indicator
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: true
  source_url: https://github.com/albetaCOM/HA-Blueprint/blob/main/sensecap_component.yaml
trigger:
- platform: mqtt
  topic: indicator/switch/action
  id: Action
- platform: mqtt
  topic: indicator/switch/state
  id: States
- platform: mqtt
  topic: indicator/sensor
  id: Sensor
- platform: state
  entity_id: !input ha_switch_entities
  id: HA_switch_states
  to:
- platform: state
  entity_id: !input ha_sensor_entities
  id: HA_sensor_states
  to:
condition: []
action:
- alias: Executa si he rebut action
  if:
  - condition: trigger
    id:
    - Action
  then:
  - service_template: '{{ trigger.payload_json.action}}'
    data: {}
    target:
      entity_id: '{{ trigger.payload_json.key}}'
- alias: Executa si l'estat es unknown
  if:
  - condition: trigger
    id:
    - States
    - Sensor
  then:
  - if:
    - condition: template
      value_template: '{%set items = trigger.payload_json.values() | list%} {{items[0] == "unknown"}}'
    then:
    - service: mqtt.publish
      metadata: {}
      data:
        qos: '1'
        retain: false
        topic: indicator/switch/set
        payload: '{%set entities_list = trigger.payload_json | list%} {"{{ entities_list[0] }}": "{{states(entities_list[0])}}"}'
- alias: Executa si switch canvia d'estat
  if:
  - condition: trigger
    id:
    - HA_switch_states
  then:
  - service: mqtt.publish
    metadata: {}
    data:
      qos: '1'
      retain: false
      topic: indicator/switch/set
      payload: '{"{{ trigger.entity_id }}": "{{ states(trigger.entity_id) }}"}'
- alias: Executa si sensor canvia d'estat
  if:
  - condition: trigger
    id:
    - HA_sensor_states
  then:
  - service: mqtt.publish
    metadata: {}
    data:
      qos: '1'
      retain: false
      topic: indicator/sensor
      payload: '{"{{ trigger.entity_id }}": "{{ states(trigger.entity_id) }}"}'
mode: queued
max: 30
